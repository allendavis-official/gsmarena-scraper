name: Scrape GSMArena Data

on:
  schedule:
    # Run weekly on Monday at 3 AM UTC
    - cron: "0 3 * * 1"
  workflow_dispatch:
    inputs:
      force_scrape:
        description: "Force scrape even if no new phones"
        required: false
        type: boolean
        default: false
      max_pages:
        description: "Max pages to scrape for reviews"
        required: false
        default: "5"
      max_phones:
        description: "Max phones to process (empty = all new phones)"
        required: false
        default: ""

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml

      - name: Scrape new reviews
        id: scrape_reviews
        run: |
          # Update max pages if provided
          MAX_PAGES="${{ github.event.inputs.max_pages || '5' }}"
          sed -i "s/MAX_PAGES = 5/MAX_PAGES = $MAX_PAGES/" phone_review_url_scraper.py

          # Run review scraper
          python phone_review_url_scraper.py

          # Check if new reviews were found
          if [ -f "gsmarena_reviews.csv" ]; then
            # Count lines (excluding header)
            NEW_COUNT=$(wc -l < gsmarena_reviews.csv)
            NEW_COUNT=$((NEW_COUNT - 1))
            
            # Get old count if file exists in repo
            OLD_COUNT=0
            if git show HEAD:gsmarena_reviews.csv &> /dev/null; then
              OLD_COUNT=$(git show HEAD:gsmarena_reviews.csv | wc -l)
              OLD_COUNT=$((OLD_COUNT - 1))
            fi
            
            DIFF=$((NEW_COUNT - OLD_COUNT))
            
            echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT
            echo "old_count=$OLD_COUNT" >> $GITHUB_OUTPUT
            echo "diff=$DIFF" >> $GITHUB_OUTPUT
            
            if [ $DIFF -gt 0 ]; then
              echo "has_new_phones=true" >> $GITHUB_OUTPUT
              echo "✓ Found $DIFF new phones!"
            else
              echo "has_new_phones=false" >> $GITHUB_OUTPUT
              echo "ℹ No new phones found"
            fi
          else
            echo "has_new_phones=false" >> $GITHUB_OUTPUT
            echo "✗ Failed to scrape reviews"
            exit 1
          fi
        continue-on-error: false

      - name: Check if should continue
        id: should_continue
        run: |
          FORCE="${{ github.event.inputs.force_scrape || 'false' }}"
          HAS_NEW="${{ steps.scrape_reviews.outputs.has_new_phones }}"

          if [ "$FORCE" = "true" ] || [ "$HAS_NEW" = "true" ]; then
            echo "continue=true" >> $GITHUB_OUTPUT
            echo "✓ Proceeding with specs and image scraping"
          else
            echo "continue=false" >> $GITHUB_OUTPUT
            echo "ℹ Skipping specs/images - no new phones and not forced"
          fi

      - name: Scrape specifications
        if: steps.should_continue.outputs.continue == 'true'
        run: |
          # Only process new phones unless forced
          if [ "${{ github.event.inputs.force_scrape }}" = "true" ]; then
            MAX_PHONES="${{ github.event.inputs.max_phones }}"
            if [ -n "$MAX_PHONES" ]; then
              sed -i "s/MAX_PHONES = 5/MAX_PHONES = $MAX_PHONES/" phone_specs_scraper.py
            else
              sed -i "s/MAX_PHONES = 5/MAX_PHONES = None/" phone_specs_scraper.py
            fi
          else
            # Process only new phones
            NEW_PHONE_COUNT="${{ steps.scrape_reviews.outputs.diff }}"
            sed -i "s/MAX_PHONES = 5/MAX_PHONES = $NEW_PHONE_COUNT/" phone_specs_scraper.py
          fi

          python phone_specs_scraper.py
        continue-on-error: true

      - name: Scrape images
        if: steps.should_continue.outputs.continue == 'true'
        run: |
          # Match the same logic as specs
          if [ "${{ github.event.inputs.force_scrape }}" = "true" ]; then
            MAX_PHONES="${{ github.event.inputs.max_phones }}"
            if [ -n "$MAX_PHONES" ]; then
              sed -i "s/max_phones=5/max_phones=$MAX_PHONES/" phone_image_scraper.py
            else
              sed -i "s/max_phones=5/max_phones=None/" phone_image_scraper.py
            fi
          else
            NEW_PHONE_COUNT="${{ steps.scrape_reviews.outputs.diff }}"
            sed -i "s/max_phones=5/max_phones=$NEW_PHONE_COUNT/" phone_image_scraper.py
          fi

          python phone_image_scraper.py
        continue-on-error: true

      - name: Optimize images
        if: steps.should_continue.outputs.continue == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y jpegoptim optipng

          find images -type f \( -name "*.jpg" -o -name "*.jpeg" \) -exec jpegoptim --max=85 --strip-all {} \; 2>/dev/null || true
          find images -type f -name "*.png" -exec optipng -o2 {} \; 2>/dev/null || true
        continue-on-error: true

      - name: Generate CDN manifest
        if: steps.should_continue.outputs.continue == 'true'
        run: |
          python << 'EOF'
          import os
          import json
          from pathlib import Path

          GITHUB_USER = "${{ github.repository_owner }}"
          GITHUB_REPO = "${{ github.event.repository.name }}"
          GITHUB_BRANCH = "main"
          CDN_BASE = f"https://cdn.jsdelivr.net/gh/{GITHUB_USER}/{GITHUB_REPO}@{GITHUB_BRANCH}"

          manifest = {}
          images_dir = Path("images")

          if images_dir.exists():
              for phone_dir in sorted(images_dir.iterdir()):
                  if phone_dir.is_dir():
                      phone_name = phone_dir.name
                      images = []
                      
                      for img_file in sorted(phone_dir.iterdir()):
                          if img_file.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']:
                              relative_path = f"images/{phone_name}/{img_file.name}"
                              cdn_url = f"{CDN_BASE}/{relative_path}"
                              
                              images.append({
                                  "filename": img_file.name,
                                  "cdn_url": cdn_url,
                                  "local_path": relative_path,
                                  "size": img_file.stat().st_size
                              })
                      
                      if images:
                          manifest[phone_name] = {
                              "phone_name": phone_name,
                              "image_count": len(images),
                              "images": images,
                              "cdn_base": f"{CDN_BASE}/images/{phone_name}"
                          }

          with open("cdn_image_manifest.json", "w", encoding="utf-8") as f:
              json.dump(manifest, f, indent=2, ensure_ascii=False)

          index = {
              "generated_at": "${{ github.run_id }}",
              "cdn_base": CDN_BASE,
              "total_phones": len(manifest),
              "total_images": sum(p["image_count"] for p in manifest.values()),
              "phones": list(manifest.keys())
          }

          with open("cdn_index.json", "w", encoding="utf-8") as f:
              json.dump(index, f, indent=2)

          print(f"Generated manifest for {index['total_phones']} phones, {index['total_images']} images")
          EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add all changes
          git add gsmarena_reviews.csv gsmarena_reviews.json 2>/dev/null || true
          git add gsmarena_specifications.json gsmarena_specifications.csv 2>/dev/null || true
          git add image_manifest.json cdn_image_manifest.json cdn_index.json 2>/dev/null || true
          git add images/ 2>/dev/null || true

          if git diff --staged --quiet; then
            echo "ℹ No changes to commit"
          else
            COMMIT_MSG="Auto-update: "
            if [ "${{ steps.scrape_reviews.outputs.has_new_phones }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG}Added ${{ steps.scrape_reviews.outputs.diff }} new phones [skip ci]"
            else
              COMMIT_MSG="${COMMIT_MSG}Updated data [skip ci]"
            fi
            
            git commit -m "$COMMIT_MSG"
            git push
            echo "✓ Changes pushed successfully"
          fi

      - name: Create summary
        if: always()
        run: |
          echo "## Scraping Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Review Scraping" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous phones:** ${{ steps.scrape_reviews.outputs.old_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Current phones:** ${{ steps.scrape_reviews.outputs.new_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New phones found:** ${{ steps.scrape_reviews.outputs.diff }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.should_continue.outputs.continue }}" = "true" ]; then
            echo "### Processing" >> $GITHUB_STEP_SUMMARY
            echo "✓ Scraped specifications and images for new phones" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Processing" >> $GITHUB_STEP_SUMMARY
            echo "ℹ Skipped - No new phones to process" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CDN Access" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "https://cdn.jsdelivr.net/gh/${{ github.repository }}@main/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
